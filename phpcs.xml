<?xml version="1.0"?>
<ruleset name="Symfony2">
    <description>Govwiki file library coding standards</description>

    <file>src</file>
    <!-- Use Symfony coding standard -->
    <config name="installed_paths" value="vendor/escapestudios/symfony2-coding-standard" />

    <!-- There should not be any code in the bundle Resources directory. -->
    <exclude-pattern>*/Resources/*</exclude-pattern>
    <exclude-pattern>*\.(?!php$)</exclude-pattern>

    <!-- Symfony follows the standards defined in the PSR-0, PSR-1 and PSR-2 documents. -->

    <!-- Include the whole PSR-1 standard -->
    <rule ref="PSR1"/>
    <!-- Include the whole PSR-2 standard -->
    <rule ref="PSR2"/>
    <!--

    See the [documented coding standard](http://symfony.com/doc/current/contributing/code/standards.html)

    This CodeSniffer standard does not yet enforce the following:

    # Structure

    * The @package and @subpackage annotations are not used.
    * Use uppercase strings for constants with words separated with underscores
    * Exception message strings should be concatenated using sprintf

    # Naming Conventions

    * Use underscores for option, argument, parameter names;

    -->

    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Functions.CallTimePassByReference"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>

    <!-- rule ref="Squiz.Strings.ConcatenationSpacing"/--> <!-- Disable for Sibers -->

    <!-- We provide our own subclass of PEAR's ClassComment and FunctionComment sniff, but these will do: -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Import Zend coding standard (which in turn imports PEAR) -->
    <rule ref="Zend">
        <!-- but exclude their code analyzer -->
        <exclude name="Zend.Debug.CodeAnalyzer"/>

        <!-- covered by Squiz ControlSignature, which enforces try/catch as well -->
        <exclude name="PEAR.ControlStructures.ControlSignature"/>

        <exclude name="PEAR.Commenting.FunctionComment.SpacingBeforeTags"/>

        <!-- do not check line length -->
        <exclude name="Generic.Files.LineLength"/>
    </rule>

    <!-- Don't enforce Zend's private member underscores -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Ignore variables that contains numbers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.ContainsNumbers">
        <severity>0</severity>
    </rule>

    <!-- In practice, Symfony2 spaces multiline function calls differently than Zend -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <!-- rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule --> <!-- Disable for Sibers -->
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.MissingParamComment">
        <severity>0</severity>
    </rule>

    <rule ref="Symfony.Commenting.FunctionComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Zend.NamingConventions.ValidVariableName.NotCamelCaps">
        <severity>0</severity>
        <message>Not CamelCaps variable is allowed.</message>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Symfony.Commenting.FunctionComment.SpacingAfterParams">
        <severity>0</severity>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <severity>0</severity>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Symfony.Formatting.BlankLineBeforeReturn">
        <severity>0</severity>
        <message>Blank line before return is not required.</message>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Squiz.Commenting.FunctionComment.SpacingAfterParamType">
        <severity>0</severity>
        <message>Spacing After Param Type is not required.</message>
    </rule>

<!-- modified for Sibers -->
    <rule ref="PEAR.Functions.FunctionCallSignature.Indent">
        <severity>0</severity>
        <message>FunctionCallSignature.Indent is not required.</message>
    </rule>

<!-- modified for Sibers -->
    <rule ref="Symfony.Functions.ScopeOrder.Invalid">
        <severity>0</severity>
        <message>Scope order is not required.</message>
    </rule>

    <rule ref="Symfony.Commenting.ClassComment.SpacingBeforeTags">
        <message>There should always be a description, followed by a blank line, before the tags of a class comment.</message>
    </rule>

    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman.BraceOnSameLine">
        <severity>0</severity>
    </rule>

</ruleset>
